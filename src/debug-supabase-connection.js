// Script de diagn√≥stico para problemas de conexi√≥n con Supabase
import { createClient } from '@supabase/supabase-js';

// Configuraci√≥n de Supabase
const SUPABASE_URL = 'https://ogqpsrsssrrytrqoyyph.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9ncXBzcnNzc3JyeXRycW95eXBoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc3Nzc5NjAsImV4cCI6MjA3MzM1Mzk2MH0.EqXjG1iefYMZ84Tw-4po98gBV7uRuPoz0idQgJ03pzg';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function diagnosticarConexionSupabase() {
  console.log('üîç INICIANDO DIAGN√ìSTICO DE CONEXI√ìN SUPABASE');
  console.log('================================================');
  
  try {
    // 1. Verificar conexi√≥n b√°sica
    console.log('1Ô∏è‚É£ Verificando conexi√≥n b√°sica...');
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError) {
      console.error('‚ùå Error de autenticaci√≥n:', authError);
      return;
    }
    
    if (user) {
      console.log('‚úÖ Usuario autenticado:', user.email);
      console.log('   ID de usuario:', user.id);
    } else {
      console.log('‚ö†Ô∏è No hay usuario autenticado');
      console.log('   Esto puede ser normal si no has iniciado sesi√≥n');
    }
    
    // 2. Verificar tabla de organizaciones
    console.log('\n2Ô∏è‚É£ Verificando tabla de organizaciones...');
    const { data: organizations, error: orgError } = await supabase
      .from('organizations')
      .select('*');
    
    if (orgError) {
      console.error('‚ùå Error accediendo a organizaciones:', orgError);
    } else {
      console.log('‚úÖ Organizaciones encontradas:', organizations?.length || 0);
      if (organizations && organizations.length > 0) {
        organizations.forEach((org, index) => {
          console.log(`   ${index + 1}. ${org.name} (ID: ${org.id}, Owner: ${org.owner_id})`);
        });
      }
    }
    
    // 3. Verificar tabla de proyectos
    console.log('\n3Ô∏è‚É£ Verificando tabla de proyectos...');
    const { data: projects, error: projectsError } = await supabase
      .from('projects')
      .select('*');
    
    if (projectsError) {
      console.error('‚ùå Error accediendo a proyectos:', projectsError);
    } else {
      console.log('‚úÖ Proyectos encontrados:', projects?.length || 0);
      if (projects && projects.length > 0) {
        projects.forEach((project, index) => {
          console.log(`   ${index + 1}. ${project.name} (ID: ${project.id})`);
          console.log(`      - Organizaci√≥n: ${project.organization_id}`);
          console.log(`      - Owner: ${project.owner_id}`);
          console.log(`      - Estado: ${project.status}`);
          console.log(`      - Creado: ${project.created_at}`);
        });
      }
    }
    
    // 4. Verificar proyectos por organizaci√≥n (si hay usuario autenticado)
    if (user) {
      console.log('\n4Ô∏è‚É£ Verificando proyectos por organizaci√≥n del usuario...');
      
      // Buscar organizaci√≥n del usuario
      const { data: userOrg, error: userOrgError } = await supabase
        .from('organizations')
        .select('id')
        .eq('owner_id', user.id)
        .single();
      
      if (userOrgError) {
        console.error('‚ùå Error buscando organizaci√≥n del usuario:', userOrgError);
      } else if (userOrg) {
        console.log('‚úÖ Organizaci√≥n del usuario encontrada:', userOrg.id);
        
        // Buscar proyectos de la organizaci√≥n
        const { data: userProjects, error: userProjectsError } = await supabase
          .from('projects')
          .select('*')
          .eq('organization_id', userOrg.id);
        
        if (userProjectsError) {
          console.error('‚ùå Error buscando proyectos de la organizaci√≥n:', userProjectsError);
        } else {
          console.log('‚úÖ Proyectos de la organizaci√≥n:', userProjects?.length || 0);
          if (userProjects && userProjects.length > 0) {
            userProjects.forEach((project, index) => {
              console.log(`   ${index + 1}. ${project.name} (ID: ${project.id})`);
              console.log(`      - Estado: ${project.status}`);
              console.log(`      - Presupuesto: $${project.budget}`);
            });
          }
        }
      } else {
        console.log('‚ö†Ô∏è No se encontr√≥ organizaci√≥n para el usuario');
      }
    }
    
    // 5. Verificar estructura de la base de datos
    console.log('\n5Ô∏è‚É£ Verificando estructura de la base de datos...');
    const tables = ['projects', 'organizations', 'users', 'tasks', 'risks', 'resources'];
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*')
          .limit(1);
        
        if (error) {
          console.log(`   ‚ùå Tabla ${table}: Error - ${error.message}`);
        } else {
          console.log(`   ‚úÖ Tabla ${table}: Accesible`);
        }
      } catch (err) {
        console.log(`   ‚ùå Tabla ${table}: Error - ${err.message}`);
      }
    }
    
    // 6. Verificar pol√≠ticas RLS (Row Level Security)
    console.log('\n6Ô∏è‚É£ Verificando pol√≠ticas de seguridad...');
    console.log('   ‚ÑπÔ∏è Las pol√≠ticas RLS pueden estar bloqueando el acceso a los datos');
    console.log('   ‚ÑπÔ∏è Verifica en el dashboard de Supabase que las pol√≠ticas est√©n configuradas correctamente');
    
    console.log('\n================================================');
    console.log('üèÅ DIAGN√ìSTICO COMPLETADO');
    
  } catch (error) {
    console.error('‚ùå Error general en el diagn√≥stico:', error);
  }
}

// Ejecutar diagn√≥stico
diagnosticarConexionSupabase();
