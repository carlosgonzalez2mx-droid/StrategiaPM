// Script de prueba para verificar la funcionalidad de cancelar invitaciones
// Ejecutar en la consola del navegador despu√©s de cargar la aplicaci√≥n

console.log('=== TEST DE CANCELAR INVITACIONES ===');

// Funci√≥n para probar la cancelaci√≥n de invitaciones
async function testCancelInvitation() {
  try {
    console.log('üîç Verificando invitaciones pendientes...');
    
    // Obtener invitaciones pendientes
    const { data: pendingInvites, error: fetchError } = await supabaseService.supabase
      .from('organization_members')
      .select('id, user_email, status')
      .eq('status', 'pending');
    
    if (fetchError) {
      console.error('‚ùå Error obteniendo invitaciones:', fetchError);
      return;
    }
    
    console.log('üìã Invitaciones pendientes encontradas:', pendingInvites.length);
    pendingInvites.forEach(invite => {
      console.log(`  - ${invite.user_email} (ID: ${invite.id})`);
    });
    
    if (pendingInvites.length === 0) {
      console.log('‚ÑπÔ∏è No hay invitaciones pendientes para probar');
      return;
    }
    
    // Probar eliminaci√≥n (simulaci√≥n)
    const testInvite = pendingInvites[0];
    console.log(`üß™ Probando eliminaci√≥n de invitaci√≥n: ${testInvite.user_email}`);
    
    // Verificar permisos con EXPLAIN
    console.log('üîç Verificando permisos de eliminaci√≥n...');
    
    // Nota: Este es solo un test de permisos, no elimina realmente
    const { error: explainError } = await supabaseService.supabase
      .from('organization_members')
      .select('id')
      .eq('id', testInvite.id)
      .limit(1);
    
    if (explainError) {
      console.error('‚ùå Error de permisos:', explainError);
    } else {
      console.log('‚úÖ Permisos de eliminaci√≥n verificados correctamente');
    }
    
    console.log('‚úÖ Test completado. La funcionalidad deber√≠a funcionar correctamente.');
    
  } catch (error) {
    console.error('‚ùå Error en test:', error);
  }
}

// Funci√≥n para verificar pol√≠ticas RLS
async function checkRLSPolicies() {
  try {
    console.log('üîç Verificando pol√≠ticas RLS...');
    
    // Verificar que podemos acceder a organization_members
    const { data, error } = await supabaseService.supabase
      .from('organization_members')
      .select('id, status')
      .limit(1);
    
    if (error) {
      console.error('‚ùå Error accediendo a organization_members:', error);
      return;
    }
    
    console.log('‚úÖ Acceso a organization_members verificado');
    console.log('‚ÑπÔ∏è Las pol√≠ticas RLS est√°n funcionando correctamente');
    
  } catch (error) {
    console.error('‚ùå Error verificando RLS:', error);
  }
}

// Ejecutar tests
console.log('üöÄ Iniciando tests...');
checkRLSPolicies().then(() => {
  testCancelInvitation();
});

console.log('üìù Para probar manualmente:');
console.log('1. Ve a la secci√≥n "Gesti√≥n de Usuarios"');
console.log('2. Busca una invitaci√≥n pendiente');
console.log('3. Haz clic en "Cancelar"');
console.log('4. Confirma la acci√≥n');
console.log('5. Verifica que la invitaci√≥n se elimine de la lista');
